name: "Run Selenium scraper (PR + Push to GAS)"
run-name: "Run by ${ { github.actor } } • ${ { github.event_name } }"

on:
  workflow_dispatch:
    inputs:
      csv_path:
        description: "CSV path (default: accounts.csv)"
        required: false
        default: "accounts.csv"
      ids:
        description: "Account IDs (one per line). If set, overrides csv_path."
        required: false
        default: ""
      target:
        description: 'Where to write at GAS: "list" or "database"'
        required: false
        default: "database"

jobs:
  run:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install "selenium>=4.24.0,<5"

      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v1

      - name: Remove stale chromedriver from PATH
        run: |
          if command -v chromedriver; then
            echo "Found chromedriver at: $(which chromedriver)"
            sudo rm -f "$(which chromedriver)"
            echo "Removed stale chromedriver"
          else
            echo "No chromedriver in PATH"
          fi

      - name: Show versions (debug)
        run: |
          which google-chrome || true
          google-chrome --version || true
          python -c "import selenium, platform; print('selenium', selenium.__version__); print(platform.platform())"

      # ★ここが肝：ids が来ていれば、その内容だけで accounts.csv を作る（正規化はしない）
      - name: Build accounts.csv from ids (no normalization, no Python)
        run: |
          set -eux
          IDS_INPUT="${{ github.event.inputs.ids }}"
          if [ -n "$IDS_INPUT" ]; then
            printf 'Account ID\n' > accounts.csv
            printf '%s\n' "$IDS_INPUT" \
            | tr -d '\r' \
            | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
            | awk 'NF' \
            | while IFS= read -r line; do
                esc="${line//\"/\"\"}"
                printf '"%s"\n' "$esc" >> accounts.csv
              done
            echo "Built accounts.csv from ids:"
            head -n 10 accounts.csv || true
          else
            echo "No ids provided; will use csv_path input."
          fi

      - name: Run script
        env:
          CHROME_PATH: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          set -eux
          if [ -n "${{ github.event.inputs.ids }}" ]; then
            CSV_PATH="accounts.csv"   # ← ids優先：リポのCSVは使わない
          else
            CSV_PATH="${{ github.event.inputs.csv_path || 'accounts.csv' }}"
          fi
          echo "Using CSV_PATH=$CSV_PATH"
          python main.py "$CSV_PATH"
          echo "--- head of updated CSV ---"
          head -n 5 "$CSV_PATH" || true

      - name: Post CSV to GAS (simple token / target switch)
        if: always()
        env:
          GAS_ENDPOINT: ${{ secrets.GAS_ENDPOINT }}
          GAS_TOKEN:    ${{ secrets.GAS_TOKEN }}
        run: |
          set -euo pipefail
          command -v jq >/dev/null || (sudo apt-get update && sudo apt-get install -y jq)

          if [ -n "${{ github.event.inputs.ids }}" ]; then
            CSV_PATH="accounts.csv"
          else
            CSV_PATH="${{ github.event.inputs.csv_path || 'accounts.csv' }}"
          fi
          TARGET="${{ github.event.inputs.target || 'database' }}"

          GAS_ENDPOINT="$(printf '%s' "$GAS_ENDPOINT" | tr -d '\r\n' | sed 's/[[:space:]]\+$//')"
          GAS_TOKEN="$(printf '%s' "$GAS_TOKEN" | tr -d '\r\n')"

          ENC_TOKEN=$(printf '%s' "$GAS_TOKEN" | jq -sRr @uri)
          ENC_TARGET=$(printf '%s' "$TARGET" | jq -sRr @uri)

          jq -Rs '{csvText: .}' < "$CSV_PATH" > payload.json

          if echo "$GAS_ENDPOINT" | grep -q '?'; then
            URL="${GAS_ENDPOINT}&token=${ENC_TOKEN}&target=${ENC_TARGET}"
          else
            URL="${GAS_ENDPOINT}?token=${ENC_TOKEN}&target=${ENC_TARGET}"
          fi

          echo "Posting to GAS (target=${TARGET})..."
          POST_CODE=$(curl -sS -o /dev/null -D headers.txt -w "%{http_code}" \
            -X POST "$URL" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json)
          echo "POST HTTP $POST_CODE"

          LOC=$(grep -i '^Location:' headers.txt | awk '{print $2}' | tr -d '\r')
          if [ -n "${LOC:-}" ]; then
            GET_CODE=$(curl -sS -o response.json -w "%{http_code}" "$LOC")
            echo "GET HTTP $GET_CODE"
            echo "Response body:" && cat response.json || true
          fi

          if [ "$POST_CODE" != "200" ] && [ "$POST_CODE" != "302" ]; then
            echo "::error::GAS POST returned HTTP $POST_CODE"
            exit 1
          fi

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accounts.csv
          path: |
            ${{ github.event.inputs.ids && 'accounts.csv' || (github.event.inputs.csv_path || 'accounts.csv') }}

      # ★ids 実行時はPRを出さない（リポのCSVを汚さない）
      - name: Create Pull Request
        if: ${{ !github.event.inputs.ids }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Update accounts.csv via CI"
          title: "Update accounts.csv"
          body: "CI updated accounts.csv"
          branch: "ci/update-accounts-csv"
          delete-branch: true
          add-paths: |
            ${{ github.event.inputs.csv_path || 'accounts.csv' }}
