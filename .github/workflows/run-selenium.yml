# =========================================================
# ワークフロー表示名（Actions 左側の一覧に出る）
# =========================================================
name: "Run Selenium scraper (PR + Push to GAS)"

# 各実行（Run）のタイトル（任意。なくても可）
run-name: "Run by ${{ github.actor }} • ${{ github.event_name }}"

# =========================================================
# トリガ（手動実行）
#   - ids が指定されたら「シート起動モード」とみなす
#   - ids が空なら「リポ内CSV運用モード」
# =========================================================
on:
  workflow_dispatch:
    inputs:
      csv_path:
        description: "CSV path (default: accounts.csv)"
        required: false
        default: "accounts.csv"
      ids:
        description: "Account IDs (one per line). If set, overrides csv_path."
        required: false
        default: ""
      target:
        description: 'Where to write at GAS: "list" or "database"'
        required: false
        default: "database"
  # 定期実行したい場合は有効化（UTC）
  # schedule:
  #   - cron: "30 3 * * *"  # JST 12:30

jobs:
  run:
    runs-on: ubuntu-latest

    # リポジトリへの書き込み/PR 作成に必要な権限
    permissions:
      contents: write
      pull-requests: write

    steps:
      # ---------------------------------------------------
      # [STEP 1] リポジトリのコードを取得
      # ---------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      # ---------------------------------------------------
      # [STEP 2] Python 3.11 をセットアップ（pip キャッシュ有効）
      # ---------------------------------------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      # ---------------------------------------------------
      # [STEP 3] 依存インストール（Selenium 4.24+）
      # ---------------------------------------------------
      - name: Install deps
        run: |
          set -eux
          python -m pip install --upgrade pip
          pip install "selenium>=4.24.0,<5"

      # ---------------------------------------------------
      # [STEP 4] Chrome をセットアップ（Selenium が操作する実ブラウザ）
      # ---------------------------------------------------
      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v1

      # ---------------------------------------------------
      # [STEP 5] PATH 上にある古い chromedriver を削除
      #          （Selenium Manager に自動解決させるための保険）
      # ---------------------------------------------------
      - name: Remove stale chromedriver from PATH
        run: |
          set -eux
          if command -v chromedriver; then
            echo "Found chromedriver at: $(which chromedriver)"
            sudo rm -f "$(which chromedriver)"
            echo "Removed stale chromedriver"
          else
            echo "No chromedriver in PATH"
          fi

      # ---------------------------------------------------
      # [STEP 6] バージョン情報（デバッグ用）
      # ---------------------------------------------------
      - name: Show versions (debug)
        run: |
          set -eux
          which google-chrome || true
          google-chrome --version || true
          python -c "import selenium, platform; print('selenium', selenium.__version__); print(platform.platform())"

      # ---------------------------------------------------
      # [STEP 7] シート起動モード（ids あり）のみ：
      #          受け取った ids から accounts.csv を生成
      #          ※ 正規化（@除去・URL→ID抽出など）は GAS 側が担当。
      #             ここでは空行除去と前後空白トリムのみ実施。
      # ---------------------------------------------------
      - name: Build accounts.csv from ids (no normalization, no Python)
        run: |
          set -eux
          IDS_INPUT="${{ github.event.inputs.ids }}"
          if [ -n "$IDS_INPUT" ]; then
            printf 'Account ID\n' > accounts.csv
            printf '%s\n' "$IDS_INPUT" \
            | tr -d '\r' \
            | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
            | awk 'NF' \
            | while IFS= read -r line; do
                # CSVクオート（" を "" にエスケープ）
                esc="${line//\"/\"\"}"
                printf '"%s"\n' "$esc" >> accounts.csv
              done
            echo "Built accounts.csv from provided ids:"
            head -n 10 accounts.csv || true
          else
            echo "No ids provided; will use csv_path input in the next step."
          fi

      # ---------------------------------------------------
      # [STEP 8] スクレイパー実行：
      #          - ids あり → 直前に生成した accounts.csv を使用（リポCSVは使わない）
      #          - ids なし → inputs.csv_path を使用
      # ---------------------------------------------------
      - name: Run script (main.py)
        env:
          CHROME_PATH: ${{ steps.chrome.outputs.chrome-path }}  # setup-chrome の出力
        run: |
          set -eux
          if [ -n "${{ github.event.inputs.ids }}" ]; then
            CSV_PATH="accounts.csv"   # シート起動：リポのCSVは参照しない
          else
            CSV_PATH="${{ github.event.inputs.csv_path || 'accounts.csv' }}"
          fi
          echo "Using CSV_PATH=$CSV_PATH"
          python main.py "$CSV_PATH"
          echo "--- head of updated CSV ---"
          head -n 5 "$CSV_PATH" || true

      # ---------------------------------------------------
      # [STEP 9] GAS に CSV を Push（token 認証／target 指定）
      #          ids あり（シート起動）は target を list に固定（保険）
      #          ids なし（リポCSV運用）は target 入力（未指定なら database）
      # ---------------------------------------------------
      - name: Post CSV to GAS (token + target)
        if: always()
        env:
          GAS_ENDPOINT: ${{ secrets.GAS_ENDPOINT }}   # Webアプリの /exec
          GAS_TOKEN:    ${{ secrets.GAS_TOKEN }}      # GAS の SHARED_TOKEN と一致
        run: |
          set -euo pipefail

          # CSV の場所を確定
          if [ -n "${{ github.event.inputs.ids }}" ]; then
            CSV_PATH="accounts.csv"
            TARGET="list"   # シート起動は list へ（B列更新）
          else
            CSV_PATH="${{ github.event.inputs.csv_path || 'accounts.csv' }}"
            TARGET="${{ github.event.inputs.target || 'database' }}"
          fi

          # jq が無い環境向け対策（Ubuntu には基本未プリインストール）
          command -v jq >/dev/null || (sudo apt-get update && sudo apt-get install -y jq)

          # Secrets の余分な改行/空白を除去
          GAS_ENDPOINT="$(printf '%s' "$GAS_ENDPOINT" | tr -d '\r\n' | sed 's/[[:space:]]\+$//')"
          GAS_TOKEN="$(printf '%s' "$GAS_TOKEN" | tr -d '\r\n')"

          # URL エンコード
          ENC_TOKEN=$(printf '%s' "$GAS_TOKEN" | jq -sRr @uri)
          ENC_TARGET=$(printf '%s' "$TARGET" | jq -sRr @uri)

          # CSV全文を JSON の csvText に詰める（改行も含め丸ごと）
          jq -Rs '{csvText: .}' < "$CSV_PATH" > payload.json

          # token と target をクエリに付けて叩く
          if echo "$GAS_ENDPOINT" | grep -q '?'; then
            URL="${GAS_ENDPOINT}&token=${ENC_TOKEN}&target=${ENC_TARGET}"
          else
            URL="${GAS_ENDPOINT}?token=${ENC_TOKEN}&target=${ENC_TARGET}"
          fi

          echo "Posting to: $URL"
          POST_CODE=$(curl -sS -o /dev/null -D headers.txt -w "%{http_code}" \
            -X POST "$URL" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json)
          echo "POST HTTP $POST_CODE"

          # 302 ならリダイレクト先をGETしてログに残す（Apps Script Webアプリの仕様）
          LOC=$(grep -i '^Location:' headers.txt | awk '{print $2}' | tr -d '\r')
          if [ -n "${LOC:-}" ]; then
            GET_CODE=$(curl -sS -o response.json -w "%{http_code}" "$LOC")
            echo "GET HTTP $GET_CODE"
            echo "Response body:" && cat response.json || true
          fi

          if [ "$POST_CODE" != "200" ] && [ "$POST_CODE" != "302" ]; then
            echo "::error::GAS POST returned HTTP $POST_CODE"
            exit 1
          fi

      # ---------------------------------------------------
      # [STEP 10] 生成CSVを Artifact として保存（ダウンロード用途）
      # ---------------------------------------------------
      - name: Upload artifact (accounts.csv)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accounts.csv
          path: |
            ${{ github.event.inputs.ids && 'accounts.csv' || (github.event.inputs.csv_path || 'accounts.csv') }}

      # ---------------------------------------------------
      # [STEP 11] PR 作成（ids が空の時＝リポCSV運用モードのみ）
      # ---------------------------------------------------
      - name: Create Pull Request (only when csv_path mode)
        if: ${{ !github.event.inputs.ids }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Update accounts.csv via CI"
          title: "Update accounts.csv"
          body: "CI updated accounts.csv"
          branch: "ci/update-accounts-csv"
          delete-branch: true
          add-paths: |
            ${{ github.event.inputs.csv_path || 'accounts.csv' }}
