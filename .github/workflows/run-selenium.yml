# Actions 上の表示名
name: Run Selenium scraper (PR + Push to GAS)

on:
  # 手動実行（Actions 画面から Run）
  workflow_dispatch:
    inputs:
      csv_path:
        description: 'CSV path (default: accounts.csv)'
        required: false
        default: 'accounts.csv'
  # 定期実行したいなら cron を有効化（例はUTC 03:30=JST 12:30）
  # schedule:
  #   - cron: '30 3 * * *'

jobs:
  run:
    runs-on: ubuntu-latest

    # リポジトリへの書き込み/PR 作成に必要
    permissions:
      contents: write
      pull-requests: write

    steps:
      # 1) リポジトリのコードを取得
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Python 3.11 を用意（pip キャッシュ有効）
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # 3) 依存インストール（Selenium 4.24+）
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install "selenium>=4.24.0,<5"

      # 4) Chrome のセットアップ（Selenium が使う実ブラウザ）
      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v1

      # 5) PATH 上の古い chromedriver は削除（Selenium Manager に任せるため）
      - name: Remove stale chromedriver from PATH
        run: |
          if command -v chromedriver; then
            echo "Found chromedriver at: $(which chromedriver)"
            sudo rm -f "$(which chromedriver)"
            echo "Removed stale chromedriver"
          else
            echo "No chromedriver in PATH"
          fi

      # 6) デバッグ用にバージョン情報を出力
      - name: Show versions (debug)
        run: |
          which google-chrome || true
          google-chrome --version || true
          python -c "import selenium, platform; print('selenium', selenium.__version__); print(platform.platform())"

      # 7) あなたの main.py を実行して CSV を更新
      - name: Run script
        env:
          CHROME_PATH: ${{ steps.chrome.outputs.chrome-path }}  # setup-chrome の出力
        run: |
          set -eux
          CSV_PATH="${{ github.event.inputs.csv_path || 'accounts.csv' }}"
          python main.py "$CSV_PATH"
          echo "--- head of updated CSV ---"
          head -n 5 "$CSV_PATH"

      # 8) GAS に CSV を Push
      - name: Post CSV to GAS (simple token / no HMAC)
        if: always()
        env:
          GAS_ENDPOINT: ${{ secrets.GAS_ENDPOINT }}   # 例: https://script.google.com/macros/s/XXXX/exec
          GAS_TOKEN:    ${{ secrets.GAS_TOKEN }}      # ← SHARED_TOKEN と同じ文字列
        run: |
          set -euo pipefail
          command -v jq >/dev/null || (sudo apt-get update && sudo apt-get install -y jq)
      
          CSV_PATH="${{ github.event.inputs.csv_path || 'accounts.csv' }}"
          test -f "$CSV_PATH" || { echo "::error::CSV not found at $CSV_PATH"; exit 2; }
      
          GAS_ENDPOINT="$(printf '%s' "$GAS_ENDPOINT" | tr -d '\r\n' | sed 's/[[:space:]]\+$//')"
          GAS_TOKEN="$(printf '%s' "$GAS_TOKEN" | tr -d '\r\n')"
      
          # CSV全文を JSON の csvText に詰める（改行も含めて丸ごと）
          jq -Rs '{csvText: .}' < "$CSV_PATH" > payload.json
      
          # token をクエリに付ける
          if echo "$GAS_ENDPOINT" | grep -q '?'; then
            URL="${GAS_ENDPOINT}&token=${GAS_TOKEN}"
          else
            URL="${GAS_ENDPOINT}?token=${GAS_TOKEN}"
          fi
      
          echo "Posting to GAS..."
          POST_CODE=$(curl -sS -o /dev/null -D headers.txt -w "%{http_code}" \
            -X POST "$URL" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json)
          echo "POST HTTP $POST_CODE"
      
          LOC=$(grep -i '^Location:' headers.txt | awk '{print $2}' | tr -d '\r')
          if [ -n "${LOC:-}" ]; then
            GET_CODE=$(curl -sS -o response.json -w "%{http_code}" "$LOC")
            echo "GET HTTP $GET_CODE"
            echo "Response body:" && cat response.json || true
          fi
      
          if [ "$POST_CODE" != "200" ] && [ "$POST_CODE" != "302" ]; then
            echo "::error::GAS POST returned HTTP $POST_CODE"
            exit 1
          fi

      # 9) 生成された CSV を Artifact として保存（ダウンロード用途）
      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accounts.csv
          path: ${{ github.event.inputs.csv_path || 'accounts.csv' }}

      # 10) main をクリーンに保ち、変更は PR として提案
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Update accounts.csv via CI"
          title: "Update accounts.csv"
          body: "CI updated accounts.csv"
          branch: "ci/update-accounts-csv"  # 作業用ブランチ名（固定運用）
          delete-branch: true
          add-paths: |
            ${{ github.event.inputs.csv_path || 'accounts.csv' }}
