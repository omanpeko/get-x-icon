name: Run Selenium scraper (PR + Push to GAS)

on:
  workflow_dispatch:
    inputs:
      csv_path:
        description: 'CSV path (default: accounts.csv)'
        required: false
        default: 'accounts.csv'
  # 定期実行したい場合は有効化（例：JST 12:30 = UTC 03:30）
  # schedule:
  #   - cron: '30 3 * * *'

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # 変更コミット／PRのため
      pull-requests: write  # PR作成のため

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install "selenium>=4.24.0,<5"

      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v1

      # 古いchromedriverがPATHに居ると不整合で落ちるので除去
      - name: Remove stale chromedriver from PATH
        run: |
          if command -v chromedriver; then
            echo "Found chromedriver at: $(which chromedriver)"
            sudo rm -f "$(which chromedriver)"
            echo "Removed stale chromedriver"
          else
            echo "No chromedriver in PATH"
          fi

      - name: Show versions (debug)
        run: |
          which google-chrome || true
          google-chrome --version || true
          python -c "import selenium, platform; print('selenium', selenium.__version__); print(platform.platform())"

      - name: Run script
        env:
          CHROME_PATH: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          set -eux
          CSV_PATH="${{ github.event.inputs.csv_path || 'accounts.csv' }}"
          python main.py "$CSV_PATH"
          echo "--- head of updated CSV ---"
          head -n 5 "$CSV_PATH"

      # ★ CI完了時にGASへ即反映（非公開RepoでもOK）
      - name: Post CSV to GAS (hardened)
        if: always()
        env:
          GAS_ENDPOINT: ${{ secrets.GAS_ENDPOINT }}
          GAS_SHARED_SECRET: ${{ secrets.GAS_SHARED_SECRET }}
        run: |
          set -euo pipefail

          # 1) 依存コマンドの存在チェック（念のため）
          command -v jq >/dev/null || (sudo apt-get update && sudo apt-get install -y jq)
          command -v openssl >/dev/null || (echo "openssl not found" && exit 2)
          command -v curl >/dev/null || (echo "curl not found" && exit 2)

          # 2) CSVパス確定＆存在チェック
          CSV_PATH="${{ github.event.inputs.csv_path || 'accounts.csv' }}"
          test -f "$CSV_PATH" || { echo "::error::CSV not found at $CSV_PATH"; exit 2; }

          # 3) Secrets の存在チェック
          if [ -z "${GAS_ENDPOINT:-}" ]; then
            echo "::error::GAS_ENDPOINT secret is empty"; exit 2
          fi
          if [ -z "${GAS_SHARED_SECRET:-}" ]; then
            echo "::error::GAS_SHARED_SECRET secret is empty"; exit 2
          fi

          # 4) 余計な改行や空白を除去（URL malformed 対策）
          GAS_ENDPOINT="$(printf '%s' "$GAS_ENDPOINT" | tr -d '\r\n' | sed 's/[[:space:]]\+$//')"
          GAS_SHARED_SECRET="$(printf '%s' "$GAS_SHARED_SECRET" | tr -d '\r\n')"

          # 5) JSON化（CSV全文を格納）
          JSON="$(jq -Rs '{csvText: .}' < "$CSV_PATH")"

          # 6) HMAC-SHA256 署名（hex）
          SIG="$(printf '%s' "$JSON" | openssl dgst -sha256 -hmac "$GAS_SHARED_SECRET" -binary | xxd -p -c 256)"

          # 7) 署名クエリを付与（既に?がある/ないに対応）
          if echo "$GAS_ENDPOINT" | grep -q '?'; then
            URL="${GAS_ENDPOINT}&signature=${SIG}"
          else
            URL="${GAS_ENDPOINT}?signature=${SIG}"
          fi

          # 8) デバッグ出力（URLはホスト部だけ表示）
          echo "Posting to: $(echo "$GAS_ENDPOINT" | awk -F/ '{print $1"//"$3}') ..."
          echo "CSV bytes: $(wc -c < "$CSV_PATH")"

          # 9) 送信（HTTPコードも表示）
          HTTP_CODE=$(curl -sS -o response.json -w "%{http_code}" \
            -X POST "$URL" \
            -H "Content-Type: application/json" \
            -H "X-Signature: $SIG" \
            --data "$JSON" )
          echo "HTTP $HTTP_CODE"
          echo "Response body:" && cat response.json

          # 10) HTTPコード確認（200以外は失敗扱いにしたい場合はここで落とす）
          [ "$HTTP_CODE" = "200" ] || { echo "::error::GAS returned HTTP $HTTP_CODE"; exit 1; }


      # 任意：成果物としてCSVを保存（ダウンロード用）
      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accounts.csv
          path: ${{ github.event.inputs.csv_path || 'accounts.csv' }}

      # mainをクリーンに保つため、変更はPRで提案
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Update accounts.csv via CI"
          title: "Update accounts.csv"
          body: "CI updated accounts.csv"
          branch: "ci/update-accounts-csv"
          delete-branch: true
          add-paths: |
            ${{ github.event.inputs.csv_path || 'accounts.csv' }}
